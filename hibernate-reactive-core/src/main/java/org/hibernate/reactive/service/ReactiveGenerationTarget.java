package org.hibernate.reactive.service;

import org.hibernate.reactive.service.initiator.ReactiveConnectionPoolProvider;
import org.hibernate.reactive.util.impl.CompletionStages;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.tool.schema.internal.exec.GenerationTarget;

import java.util.concurrent.CompletionStage;

/**
 * Adaptor that redirects DDL generated by the schema export
 * tool to the reactive connection.
 *
 * @author Gavin King
 */
public class ReactiveGenerationTarget implements GenerationTarget {
	private ReactiveConnection connection;
	private ServiceRegistry registry;
	private CompletionStage<Void> commands;

	public ReactiveGenerationTarget(ServiceRegistry registry) {
		this.registry = registry;
	}

	@Override
	public void prepare() {
		connection = registry.getService( ReactiveConnectionPoolProvider.class ).getConnection();
		commands = CompletionStages.nullFuture();
	}

	@Override
	public void accept(String command) {
		commands = commands.thenCompose( v -> connection.preparedQuery(command) )
				.handle( (r, e) -> {
					if ( e != null ) {
						System.out.println( e.getMessage() );
					}
					return null;
				} );
	}

	@Override
	public void release() {
		if ( commands != null ) {
			commands.toCompletableFuture().join();
		}
		connection = null;
	}
}
